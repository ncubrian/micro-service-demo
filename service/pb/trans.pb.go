// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trans.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	trans.proto

It has these top-level messages:
	Trans
	TransList
	QueryCond
	Resp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request trans message definition
type Trans struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrderNum string `protobuf:"bytes,2,opt,name=orderNum" json:"orderNum,omitempty"`
	TransAmt int64  `protobuf:"varint,3,opt,name=transAmt" json:"transAmt,omitempty"`
}

func (m *Trans) Reset()                    { *m = Trans{} }
func (m *Trans) String() string            { return proto.CompactTextString(m) }
func (*Trans) ProtoMessage()               {}
func (*Trans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Trans) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trans) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

func (m *Trans) GetTransAmt() int64 {
	if m != nil {
		return m.TransAmt
	}
	return 0
}

type TransList struct {
	T []*Trans `protobuf:"bytes,1,rep,name=t" json:"t,omitempty"`
}

func (m *TransList) Reset()                    { *m = TransList{} }
func (m *TransList) String() string            { return proto.CompactTextString(m) }
func (*TransList) ProtoMessage()               {}
func (*TransList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransList) GetT() []*Trans {
	if m != nil {
		return m.T
	}
	return nil
}

type QueryCond struct {
	OrderNum    string `protobuf:"bytes,1,opt,name=orderNum" json:"orderNum,omitempty"`
	MinTransAmt int64  `protobuf:"varint,2,opt,name=minTransAmt" json:"minTransAmt,omitempty"`
	MaxTransAmt int64  `protobuf:"varint,3,opt,name=maxTransAmt" json:"maxTransAmt,omitempty"`
}

func (m *QueryCond) Reset()                    { *m = QueryCond{} }
func (m *QueryCond) String() string            { return proto.CompactTextString(m) }
func (*QueryCond) ProtoMessage()               {}
func (*QueryCond) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryCond) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

func (m *QueryCond) GetMinTransAmt() int64 {
	if m != nil {
		return m.MinTransAmt
	}
	return 0
}

func (m *QueryCond) GetMaxTransAmt() int64 {
	if m != nil {
		return m.MaxTransAmt
	}
	return 0
}

type Resp struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Resp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Trans)(nil), "pb.Trans")
	proto.RegisterType((*TransList)(nil), "pb.TransList")
	proto.RegisterType((*QueryCond)(nil), "pb.QueryCond")
	proto.RegisterType((*Resp)(nil), "pb.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transaction service

type TransactionClient interface {
	Add(ctx context.Context, in *Trans, opts ...grpc.CallOption) (*Resp, error)
	Update(ctx context.Context, in *Trans, opts ...grpc.CallOption) (*Resp, error)
	Find(ctx context.Context, in *QueryCond, opts ...grpc.CallOption) (*TransList, error)
}

type transactionClient struct {
	cc *grpc.ClientConn
}

func NewTransactionClient(cc *grpc.ClientConn) TransactionClient {
	return &transactionClient{cc}
}

func (c *transactionClient) Add(ctx context.Context, in *Trans, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := grpc.Invoke(ctx, "/pb.Transaction/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) Update(ctx context.Context, in *Trans, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := grpc.Invoke(ctx, "/pb.Transaction/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) Find(ctx context.Context, in *QueryCond, opts ...grpc.CallOption) (*TransList, error) {
	out := new(TransList)
	err := grpc.Invoke(ctx, "/pb.Transaction/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transaction service

type TransactionServer interface {
	Add(context.Context, *Trans) (*Resp, error)
	Update(context.Context, *Trans) (*Resp, error)
	Find(context.Context, *QueryCond) (*TransList, error)
}

func RegisterTransactionServer(s *grpc.Server, srv TransactionServer) {
	s.RegisterService(&_Transaction_serviceDesc, srv)
}

func _Transaction_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trans)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Transaction/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Add(ctx, req.(*Trans))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trans)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Transaction/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Update(ctx, req.(*Trans))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Transaction/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Find(ctx, req.(*QueryCond))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transaction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Transaction",
	HandlerType: (*TransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Transaction_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Transaction_Update_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Transaction_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trans.proto",
}

func init() { proto.RegisterFile("trans.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x50, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0xdd, 0xb4, 0xeb, 0xd2, 0x4e, 0x59, 0x0f, 0x39, 0x68, 0x29, 0x82, 0x4b, 0x10, 0xd9, 0x53,
	0x0f, 0xeb, 0x17, 0x2c, 0x82, 0x27, 0x51, 0x0c, 0xf5, 0x03, 0x5a, 0xd3, 0x43, 0x58, 0x9a, 0x84,
	0x74, 0x16, 0xf4, 0xef, 0x4d, 0x06, 0x8c, 0xbb, 0x82, 0xb7, 0xc9, 0x7b, 0x2f, 0xef, 0xcd, 0x1b,
	0xa8, 0xd0, 0xf7, 0x66, 0x6e, 0x9d, 0xb7, 0x68, 0x79, 0xe6, 0x06, 0xf1, 0x0a, 0x17, 0x5d, 0x84,
	0xf8, 0x25, 0x64, 0x5a, 0xd5, 0x6c, 0xc3, 0xb6, 0xa5, 0x0c, 0x13, 0x6f, 0xa0, 0xb0, 0x5e, 0x8d,
	0xfe, 0xe5, 0x38, 0xd5, 0x19, 0xa1, 0xe9, 0x1d, 0x39, 0xf2, 0xd9, 0x4f, 0x58, 0xe7, 0x81, 0xcb,
	0x65, 0x7a, 0x8b, 0x3b, 0x28, 0xc9, 0xf0, 0x59, 0xcf, 0xc8, 0xaf, 0x81, 0x61, 0xf0, 0xcc, 0xb7,
	0xd5, 0xae, 0x6c, 0xdd, 0xd0, 0x12, 0x23, 0x19, 0x8a, 0x03, 0x94, 0x6f, 0xc7, 0xd1, 0x7f, 0x3d,
	0x5a, 0x73, 0x1e, 0xc5, 0xfe, 0x44, 0x6d, 0xa0, 0x9a, 0xb4, 0xe9, 0x7e, 0xd2, 0x32, 0x4a, 0x3b,
	0x85, 0x48, 0xd1, 0x7f, 0x76, 0xe7, 0xfb, 0x9c, 0x42, 0xe2, 0x0a, 0x96, 0x72, 0x9c, 0x5d, 0xac,
	0x68, 0x0f, 0x94, 0x50, 0xc8, 0x30, 0xed, 0x10, 0x2a, 0xd2, 0xf4, 0x1f, 0xa8, 0xad, 0xe1, 0x37,
	0x90, 0xef, 0x95, 0xe2, 0xbf, 0x8b, 0x36, 0x45, 0x1c, 0xe3, 0x57, 0xb1, 0xe0, 0xb7, 0xb0, 0x7a,
	0x77, 0xaa, 0xc7, 0xf1, 0x3f, 0xc1, 0x3d, 0x2c, 0x9f, 0x74, 0x68, 0xb3, 0x8e, 0x58, 0x2a, 0xd7,
	0xac, 0x93, 0x3a, 0x5e, 0x44, 0x2c, 0x86, 0x15, 0x1d, 0xff, 0xe1, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0xb7, 0x94, 0x2f, 0xb9, 0x8b, 0x01, 0x00, 0x00,
}
